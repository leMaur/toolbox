<?php

declare(strict_types=1);

use Rector\CodeQuality\Rector\Identical\FlipTypeControlToUseExclusiveTypeRector;
use Rector\CodeQuality\Rector\Identical\SimplifyBoolIdenticalTrueRector;
use Rector\CodingStyle\Rector\Catch_\CatchExceptionNameMatchingTypeRector;
use Rector\CodingStyle\Rector\ClassConst\VarConstantCommentRector;
use Rector\CodingStyle\Rector\ClassMethod\UnSpreadOperatorRector;
use Rector\CodingStyle\Rector\Encapsed\EncapsedStringsToSprintfRector;
use Rector\CodingStyle\Rector\FuncCall\ConsistentPregDelimiterRector;
use Rector\CodingStyle\Rector\PostInc\PostIncDecToPreIncDecRector;
use Rector\Config\RectorConfig;
use Rector\DeadCode\Rector\ClassMethod\RemoveUnusedConstructorParamRector;
use Rector\Php81\Rector\Property\ReadOnlyPropertyRector;
use Rector\Privatization\Rector\Class_\ChangeReadOnlyVariableWithDefaultValueToConstantRector;
use Rector\Privatization\Rector\ClassMethod\PrivatizeFinalClassMethodRector;
use Rector\Privatization\Rector\Property\ChangeReadOnlyPropertyWithDefaultValueToConstantRector;
use Rector\Set\ValueObject\LevelSetList;
use Rector\Set\ValueObject\SetList;
use RectorLaravel\Set\LaravelLevelSetList;

return static function (RectorConfig $rectorConfig): void {
    $dir = getcwd();

    $rectorConfig->paths([
        $dir.'/app',
    ]);

    $rectorConfig->skip([
        $dir.'/app/Http/Middleware/*',
        $dir.'/app/Providers/*',
    ]);

    /**
     * In particular cases, you can get some errors and most of the time
     * you can fix them by using a custom bootstrap file.
     *
     * You can do so by uncomment the lines below...
     */

//    $rectorConfig->bootstrapFiles([
//        $dir.'/rector-bootstrap.php',
//    ]);


    /**
     * Using `phpstan` configuration can slow down the execution
     * and/or producing some nasty errors.
     *
     * You can try it by uncomment the line below...
     */

//    $rectorConfig->phpstanConfig($dir.'/phpstan.neon');


    /**
     * Using parallel when running with docker can slow down
     * the execution. In this case, you may want to disable it.
     */

//    $rectorConfig->disableParallel();
    $rectorConfig->parallel();

    $rectorConfig->importNames();
    $rectorConfig->importShortClasses();

    $rectorConfig->sets([
        LevelSetList::UP_TO_PHP_81,
        SetList::PRIVATIZATION,
        SetList::EARLY_RETURN,
        SetList::CODING_STYLE,
        SetList::CODE_QUALITY,
        SetList::DEAD_CODE,
        SetList::TYPE_DECLARATION,
        LaravelLevelSetList::UP_TO_LARAVEL_90,
//      Be sure to have "thecodingmachine/safe" package installed before using this set!!
//      👉🏻for info: https://github.com/thecodingmachine/safe#installation or run "composer require thecodingmachine/safe"
//        $dir.'/vendor/thecodingmachine/safe/rector-migrate.php',
    ]);

    $rectorConfig->services()

        /* remove unwanted rules from PRIVATIZATION */
        ->remove(ChangeReadOnlyPropertyWithDefaultValueToConstantRector::class)
        ->remove(ChangeReadOnlyVariableWithDefaultValueToConstantRector::class)
        ->remove(PrivatizeFinalClassMethodRector::class)

        /* remove unwanted rules from CODING STYLE */
        ->remove(VarConstantCommentRector::class)
        ->remove(UnSpreadOperatorRector::class)
        ->remove(EncapsedStringsToSprintfRector::class)
        ->remove(ConsistentPregDelimiterRector::class)
        ->remove(CatchExceptionNameMatchingTypeRector::class)
        ->remove(PostIncDecToPreIncDecRector::class)

        /* remove unwanted rules from CODE QUALITY */
        ->remove(SimplifyBoolIdenticalTrueRector::class)
        ->remove(FlipTypeControlToUseExclusiveTypeRector::class)
        ->remove(ReadOnlyPropertyRector::class) // <- it adds `readonly` on writable properties

        /* remove unwanted rules from DEAD CODE (it doesn't respect contracts) */
        ->remove(RemoveUnusedConstructorParamRector::class);
};
